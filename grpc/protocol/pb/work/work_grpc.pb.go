// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: work.proto

package work

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkWindow_GetWork_FullMethodName = "/work.workWindow/GetWork"
)

// WorkWindowClient is the client API for WorkWindow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkWindowClient interface {
	GetWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type workWindowClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkWindowClient(cc grpc.ClientConnInterface) WorkWindowClient {
	return &workWindowClient{cc}
}

func (c *workWindowClient) GetWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, WorkWindow_GetWork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkWindowServer is the server API for WorkWindow service.
// All implementations must embed UnimplementedWorkWindowServer
// for forward compatibility
type WorkWindowServer interface {
	GetWork(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedWorkWindowServer()
}

// UnimplementedWorkWindowServer must be embedded to have forward compatible implementations.
type UnimplementedWorkWindowServer struct {
}

func (UnimplementedWorkWindowServer) GetWork(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWork not implemented")
}
func (UnimplementedWorkWindowServer) mustEmbedUnimplementedWorkWindowServer() {}

// UnsafeWorkWindowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkWindowServer will
// result in compilation errors.
type UnsafeWorkWindowServer interface {
	mustEmbedUnimplementedWorkWindowServer()
}

func RegisterWorkWindowServer(s grpc.ServiceRegistrar, srv WorkWindowServer) {
	s.RegisterService(&WorkWindow_ServiceDesc, srv)
}

func _WorkWindow_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkWindowServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkWindow_GetWork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkWindowServer).GetWork(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkWindow_ServiceDesc is the grpc.ServiceDesc for WorkWindow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkWindow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "work.workWindow",
	HandlerType: (*WorkWindowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWork",
			Handler:    _WorkWindow_GetWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "work.proto",
}
